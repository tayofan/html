/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-04-13 05:27:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.work;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class accboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script src=\"../js/board.js\"></script>\r\n");
      out.write("  \r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("p{\r\n");
      out.write("\tmargin: 2px;\r\n");
      out.write("\tpadding: 2px;\r\n");
      out.write("}\r\n");
      out.write(".p1{\r\n");
      out.write("\twidth : 70%;\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("}\r\n");
      out.write(".p2{\r\n");
      out.write("\twidth: 25%;\r\n");
      out.write("\tfloat: right;\r\n");
      out.write("\ttext-align: right;\r\n");
      out.write("}\r\n");
      out.write("input[name=reply]{\r\n");
      out.write("\theight: 54px;\r\n");
      out.write("\tvertical-align: top;\r\n");
      out.write("}\r\n");
      out.write("hr{\r\n");
      out.write("\tclear: both;\r\n");
      out.write("}\r\n");
      out.write(".container{\r\n");
      out.write("\tmargin-left: 20px;\r\n");
      out.write("}\r\n");
      out.write("h1{\r\n");
      out.write("\tmargin-left: 50px;\r\n");
      out.write("}\r\n");
      out.write("#stype{\r\n");
      out.write("\twidth: 100px;\r\n");
      out.write("}\r\n");
      out.write(".navbar{\r\n");
      out.write("\tmargin: 5px 35px;\r\n");
      out.write("}\r\n");
      out.write("#pageList{\r\n");
      out.write("\tmargin-left: 20%;\r\n");
      out.write("\theight: 50px;\r\n");
      out.write("}\r\n");
      out.write(".pagination{\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("\twidth: 100px;\r\n");
      out.write("}\r\n");
      out.write(".rcode{\r\n");
      out.write("\tbackground: pink;\r\n");
      out.write("\tmargin: 2px;\r\n");
      out.write("\tpadding: 3px;\r\n");
      out.write("\tborder: 1px solid lightgray;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("currentPage = 1;\r\n");
      out.write("reply = { };  //객체 생성\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\ttypeValue = \"\";\r\n");
      out.write("\twordValue = \"\";\r\n");
      out.write("\tlistServer();\r\n");
      out.write("\t\r\n");
      out.write("\t//search검색 이벤트\r\n");
      out.write("\t$('#search').on('click',function(){\r\n");
      out.write("\t\ttypeValue = $('#stype option:selected').val().trim();\r\n");
      out.write("\t\twordValue = $('#sword').val().trim();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tcurrentPage = 1;\r\n");
      out.write("\t\tlistServer();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t//page번호 클릭하는 이벤트\r\n");
      out.write("\t$('#pageList').on('click','.pnum',function(){\r\n");
      out.write("\t\t//alert($(this).text());\r\n");
      out.write("\t\tcurrentPage = $(this).text();\r\n");
      out.write("\t\tlistServer();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t//이전버튼 클릭하는 이벤트\r\n");
      out.write("\t$('#pageList').on('click','.prev',function(){\r\n");
      out.write("\t\tcurrentPage = parseInt($('.pager a').first().text()) - 1;\r\n");
      out.write("\t\tlistServer();\r\n");
      out.write("\t\t//alert(currentPage);\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t//다음버튼 클릭하는 이벤트\r\n");
      out.write("\t$('#pageList').on('click','.next',function(){\r\n");
      out.write("\t\tcurrentPage = parseInt($('.pager a').last().text()) + 1;\r\n");
      out.write("\t\tlistServer();\r\n");
      out.write("\t\t//alert(currentPage);\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t//수정, 삭제 등록 버튼 이벤트\r\n");
      out.write("\t//댓글삭제, 댓글 수정\r\n");
      out.write("\t$('.container').on('click','.action',function(){\r\n");
      out.write("\t\tactionName = $(this).attr('name');\r\n");
      out.write("\t\tactionIdx = $(this).attr('idx');\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(actionName == \"modify\"){\r\n");
      out.write("\t\t\talert(actionIdx + \"번 글을 수정 합니다\");\r\n");
      out.write("\t\t}else if(actionName == \"delete\"){\r\n");
      out.write("\t\t\talert(actionIdx + \"번 글을 삭제 합니다\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tboardDelete();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}else if(actionName == \"reply\"){\r\n");
      out.write("\t\t\talert(actionIdx + \"번 글에 댓글을 답니다\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//입력한 내용 - cont\r\n");
      out.write("\t\t\t//글번호 - bonum - actionIdx\r\n");
      out.write("\t\t\t//이름 - name - random\r\n");
      out.write("\t\t\t//객체로 저장 - reply = { }\r\n");
      out.write("\t\t\t//객체에 동적으로 속성들을 추가\r\n");
      out.write("\t\t\t//reply.cont = \"\";\r\n");
      out.write("\t\t\t//reply.name = \"\";\r\n");
      out.write("\t\t\t//reply.bonum = actionIdx;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tcont = $(this).prev().val();\r\n");
      out.write("\t\t\tname = String.fromCharCode(Math.random() * 26 + 65);\r\n");
      out.write("\t\t\tname += String.fromCharCode(Math.random() * 26 + 97);\r\n");
      out.write("\t\t\tname += parseInt(Math.random() * 100 + 1);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\treply.cont = cont;\r\n");
      out.write("\t\t\treply.name = name;\r\n");
      out.write("\t\t\treply.bonum = actionIdx;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\treplyInsert(this);\r\n");
      out.write("\t\t\t//replyList();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>accordian 게시판</h1>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t\r\n");
      out.write("\t<nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t<select class=\"form-control\" id=\"stype\">\r\n");
      out.write("\t\t\t<option value=\"\">전체</option>\r\n");
      out.write("\t\t\t<option value=\"subject\">제목</option>\r\n");
      out.write("\t\t\t<option value=\"writer\">작성자</option>\r\n");
      out.write("\t\t\t<option value=\"content\">내용</option>\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<form class=\"form-inline\">\r\n");
      out.write("\t\t\t<input class=\"form-control mr-sm-2\" id=\"sword\" type=\"text\" placeholder=\"Search\">\r\n");
      out.write("\t\t\t<button id=\"search\" class=\"btn btn-success\" type=\"button\">Search</button>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</nav>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<br>\t\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t</div>\t\r\n");
      out.write("\r\n");
      out.write("\t<br><br>\r\n");
      out.write("\t<div id='pageList'></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
